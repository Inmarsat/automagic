.. |logo1| image:: images/inmarsat.jpg
	:width: 200px
	:align: middle
	:height: 78px
	:alt: Inmarsat

|logo1|

#########################################
Automagic Project Documentation Manifesto
#########################################

Good documentation is key to successful use of your project.  You need to provide:

* Context: *WHY* am I doing this?  What problem am I trying to solve?
* How-to: *HOW* is it used?
* Outcome: *WHAT* does it achieve or produce?  This may include a bit of how does it work, or an example.

Conversely, software development should be rapid and agile.  
This drives a need for *Just Barely Good Enough* (**JBGE**) documentation, which is subjective (i.e. means something different for you than for me).
The true test of what is barely good enough is that more people "get it" than do not - this means you need to solicit feedback and iterate.

.. tip::
   In the code blocks below referring to command line entry, if you see **$** don't actually type that character, it just refers to the command prompt!


.. toctree::
   :maxdepth: 2

Tools
#####

GitHub
******

`GitHub <https://github.com/>`_ is a cloud-based repository (aka **repo**) that integrates with something called Git, which manages revision control both locally and on a *remote* of a set of files grouped together as a project.  Inmarsat is represented as an *Organization* on GitHub, with a mix of public (open-source) and private (controlled access or internal) repositories.
The key concepts are:

* **Clone** a repository makes a local copy that users can modify for their needs.
* **Pull** refreshes a cloned repository with the latest updates.
* **Commit** checks it into revision control and forces you to put a comment about what changes were made. The idea is the comment is short and sweet JBGE.
* **Push** publishes a commit to the directory, which could be public (anybody can see for *free*) or private (authorized people can see for a *cost*).
* **Merge** might be required if somebody else made changes and your local copy is out of sync.

Many of the projects Inmarsat does in context of IIoT Solutions Engineering are ad hoc oriented to Proofs of Concept.  
Those will typically not have a complex set of code branches, forks, builds, distributions, etc.  
If you do need to do more complex development or scale something for production, it's worth studying up on *software development best practices*.

.. note::
   You need a GitHub account associated with your email address, to contribute or view private repositories.  Private repositories require an invitation from the Inmarsat GitHub owner, and appropriate Role/Team membership within the Inmarsat GitHub *Organization*.

   Only authorized users can **Push** or **Merge** changes onto the cloud origin.

.. todo::
   Add some URL references to software development.

Project/Repository Structure
============================

* **<projectname>** ideally all lowercase, ideally no spaces but can use underscores for readability if necessary.  *DO NOT* use punctuation apart from underscores since that messes with a lot of systems.

   * **<projectname>** same as above except this folder is where your main code for the project goes
   * **docs** is where your documentation files will go.  Putting them in this folder allows automagic publishing to GitHub.io pages which does a lot of the work for you.

      * **conf.py** is a sphinx configuration file automatically generated for you when you use ``sphinx-quickstart``
      * **index.rst** is the "base" file for your automagic documentation, explained in detail below
      * **<other>.rst** are basically the source code for the tabs that will be available in your documentation, one RST file per tab
      * **_build** and its subdirectories will be automatically generated for you when you use ``sphinx-quickstart``
      * **index.html** should just contain a redirector to your automagic documents located in ``../docs/_build/html`` and will always have the same content so you can copy/paste between projects
      * **Makefile** is automatically generated by ``sphinx-quickstart``
      * **make.bat** is automatically generated by ``sphinx-quickstart``
      * **<other>** optional subdirectories if you want to include things like ``\images``, ``csv-tables``, etc. and keep things nice and organized

   * **README.rst** is a very short/simple overview of your project, and should include a hyperlink to your GitHub.io pages for the project.  

       Example: \`Documentation <https://inmarsat.github.io/idpmodem>\`_
       
   * **LICENSE** there are a few choices but probably the most used will be *MIT*

Settings
========

At the top of your project's main repo is a tab called ``Settings`` where you can scroll down to find a section called *GitHub Pages* where you'll see *Source* that should be set to ``master  branch /docs folder`` (then *Save*).  For this to work, you actually have to have a **docs** folder as described above.

Development/Integration Tools
=============================

Many integrated development environment (**IDE**) tools support GitHub integration.  :ref:`pycharm` is a good example of one useful for Python development.

GitHub Desktop
--------------

You can search for this online and download from `GitHub Desktop <https://desktop.github.com/>`_.  It comes in handy if for some reason your IDE integration fails.


Sphinx
******

`Sphinx <http://www.sphinx-doc.org/en/master/index.html>`_ is a Python-based utility that magically turns `ReStructuredTest <http://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html>`_ documents (like the source for this page) into beautiful HTML pages.  It also supports Javascript (including Node.js) files with a plugin called sphinx-js.

.. note::
   Python is fundamentally built around the concept of **indentation** - if you're having problems getting the results you want, double check your indentation.  Try to use (3) spaces instead of tabs.

Installing
==========

Prerequisites:

* **Python** You need to have `Python <https://www.python.org>`_ installed to use Sphinx.  The latest version of Python 3.4.x+ is recommended, but Python 2.7.x+ will work as well.  https://www.python.org
* **pip** is an installer tool for Python.  It gets automatically installed with Python 2.7.9 or higher, or Python 3.4 or higher

Installing from your Python root directory::
   
   $ pip install -U pip
   $ pip install sphinx
   ...
   $ pip install sphinx-js

sphinx-quickstart
=================

Each time you build a project, create a ``/docs`` directory, go into that directory using a Command/Console prompt and type::

   $ sphinx-quickstart

The options you almost always want to change from default are:

   * ``> Project name:`` **<projectname>**
   * ``> Author name(s)`` *go ahead, take or give some credit !*
   * ``> autodoc`` **y**
   * ``> intersphinx`` **y**
   * ``> todo`` **y**
   * ``> githubpages`` **y**

conf.py
=======

To automagically pull in software docstrings, you need to uncomment/edit 3 lines at the top of the file::

   import os
   import sys
   sys.path.insert(0, os.path.abspath('../<projectname>'))

**If** documenting Javascript, futher down, you'll see ``extensions`` where you may want to add (*indented at the same level as the others*)::

   extensions = [
      'sphinx.ext.autodoc',
      'sphinx.ext.intersphinx',
      'sphinx.ext.todo',
      'sphinx.ext.githubpages',
      'sphinx.ext.'
      'sphinx_js',
   ]

Further down near the bottom, you can also play with `html themes <http://www.sphinx-doc.org/en/master/theming.html>`_ where **bizstyle** is the nice "Inmarsat blue" theme::

   html_theme = 'bizstyle'


index.rst
=========

This is your main source file for documentation.  It is written in `ReStructuredTest <http://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html>`_.

.. note::
   The best way to learn about this is to look at some examples and play around.  Sphinx offers some custom directives that are very handy.

   There are some style guides that dictate the hierarchy of underscores for titles.

make.bat
========

Once you're done all the above, or any time after you update your RST files, go to a command prompt in your ``../docs`` subdirectory and type::

   $ make html

Then use your IDE or GitHub Desktop to commit the changes and push to remote-origin.

.. _pycharm:

PyCharm
*******

`PyCharm Community Edition <https://www.jetbrains.com/pycharm/download/>`_ is the recommended **IDE** for Python.  If you're doing more than sporadic development, you should get a license for the Professional version.


Sublime Text
************

`Sublime <https://www.sublimetext.com/>`_ is a really good text editor with syntax highlighting for different languages including **ReStructuredText**.  That's what was used to write this manifesto!
Again, if you're using this more than once in a blue moon, you should get a paid license.
